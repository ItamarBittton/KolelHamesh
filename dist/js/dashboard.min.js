angular.module('RDash', ['ui.bootstrap', 'ui.router', 'ngCookies', 'ui-notification', 'ui.mask', 'ngMaterial'])
    .config(function (NotificationProvider, $qProvider) {
        $qProvider.errorOnUnhandledRejections(false);
        NotificationProvider.setOptions({
            startTop: 20,
            startRight: 10,
            verticalSpacing: 20,
            horizontalSpacing: 20,
            positionX: 'left',
            positionY: 'bottom'
        });
    });
'use strict';

/**
 * Route configuration for the RDash module.
 */
angular.module('RDash').config(['$stateProvider', '$urlRouterProvider',
    function ($stateProvider, $urlRouterProvider) {

        // For unmatched routes
        $urlRouterProvider.otherwise('/');

        // Application routes
        $stateProvider
            // דף הבית    
            .state('index', {
                url: '/',
                templateUrl: 'templates/settings.html',
                controller: 'settingsController'
            })
            // למחוק
            .state('tables', {
                url: '/tables',
                templateUrl: 'templates/tables.html'
            })
            // אברכים
            .state('students', {
                url: '/students',
                templateUrl: 'templates/students.html',
                controller: 'studentController'
            })
            // כוללים
            .state('colels', {
                url: '/colels',
                templateUrl: 'templates/colel.html',
                controller: 'colelController'
            })
            // רשימת המלצות
            .state('recomends', {
                url: '/recomends',
                templateUrl: 'templates/recomends.html',
                controller: 'recomendController'
            })
            // דוח נוכחות
            .state('daily', {
                url: '/daily',
                templateUrl: 'templates/daily.html',
                controller: 'dailyController'
            })
            // ציונים
            .state('scores', {
                url: '/scores',
                templateUrl: 'templates/scores.html',
                controller: 'scoresController'
            })
            .state('reports', {
                url: '/reports',
                templateUrl: 'templates/reports.html',
                controller: 'reportsController'
            });
    }
]);
/**
 * Loading Directive
 * @see http://tobiasahlin.com/spinkit/
 */

angular
    .module('RDash')
    .directive('rdLoading', rdLoading);

function rdLoading() {
    var directive = {
        restrict: 'AE',
        template: '<div class="spinner">' +
                     '<div class="bounce1"></div>' +
                     '<div class="bounce2"></div>' +
                     '<div class="bounce3"></div>' +
                  '</div>'
    };
    return directive;
};
angular
    .module('RDash').directive("myCalendar", function () {
        return {
            scope: {
                viewDate: "=",
                show: "&",
                status: '='
            },
            template: `<div class="board">
                           <div class="square"
                                ng-style="{'border-color': day.status}"
                                ng-class="{ 'selected' : (day.gerg.getDate() == currentDate.getDate() && day.gerg.getMonth() == currentDate.getMonth()) }" 
                                id="{{day.key}}"
                                ng-repeat='day in month'
                                ng-click="chooseDay(day)">
                               <div class="date">{{day.val}}<span ng-if="day.gerg" class="gerg">{{day.gerg.getDate() + "/"}}{{day.gerg.getMonth() + 1 == 0 ? 1 : day.gerg.getMonth() + 1}}</span></div>
                           </div>
                       </div>`,
            link: function (scope, element) {
                scope.$watch("status", function (newValue, oldValue) {
                    if (newValue && newValue.length && !angular.equals(newValue, oldValue)) {
                        if (!scope.viewDate) {
                            scope.viewDate = {
                                year: new Date().getFullYear(),
                                month: new Date().getMonth() + 1
                            }
                        }
                        var month = scope.viewDate.month -1,
                            year = scope.viewDate.year,
                            range = new Date(year, scope.viewDate.month, 0).getDate(),
                            start = new Date(year, month, 1).getDay();
                    
                        scope.month = [];
                        var currDay = 0;
                        for (var i = 0; i < 35; i++) {
                            if (i < start || i >= range + start) {
                                scope.month.push({
                                    key: i
                                });
                            } else {
                                var today = new Date(year, month, currDay + 1),
                                    HebDate = new Hebcal.HDate(new Date(today)).toString('h').split(' ').slice(0, 2).join(' ');
                                scope.month.push({
                                    key: i,
                                    val: HebDate,
                                    gerg: today,
                                    status: scope.status[currDay]
                                });
                                currDay++;
                            }
                        }
                    }    
                });

                scope.$watch("viewDate", function (newValue, oldValue) {
                    if (newValue) {
                        var month = scope.viewDate.month - 1,
                            year = scope.viewDate.year,
                            range = new Date(year, scope.viewDate.month, 0).getDate(),
                            start = new Date(year, month, 1).getDay();

                        scope.selected = false;
                        scope.currentDate = scope.currentDate || new Date();
                        scope.chooseDay = function (day) {
                            var elementsSelected = document.querySelector(".selected")
                            if (elementsSelected) elementsSelected.classList.remove("selected");
                            document.getElementById(day.key).className += ' selected';
                            day.selected = true;
                            scope.show({
                                date: day.gerg,
                                hebDate: day
                            });
                        }
                        
                        scope.month = [];
                        var currDay = 0;
                        for (var i = 0; i < 35; i++) {
                            if (i < start || i >= range + start) {
                                scope.month.push({
                                    key: i
                                });
                            } else {
                                var today = new Date(year, month, currDay + 1),
                                    HebDate = new Hebcal.HDate(new Date(today)).toString('h').split(' ').slice(0, 2).join(' ');
                                scope.month.push({
                                    key: i,
                                    val: HebDate,
                                    gerg: today,
                                    status: scope.status[currDay]
                                });
                                currDay++;
                            }
                        }
                    }    
                });
            }
        }
    });
angular
	.module('RDash').directive("studentList", function () {
		return {
			scope: {
				students: "=",
				dropList: "="
			},
			template: `<div>
		<table class="table">
			  <thead>
				<td>שם משפחה</td>
				<td>שם פרטי</td>
				<td>טלפון</td>
				<td ng-repeat="title in dropList.title">{{title}}</td>
			  </thead>
			  <tbody>
				<tr ng-repeat="student in students">
					<td >{{student.last_name}}</td>
					<td >{{student.first_name}}</td>
					<td >{{student.phone}}</td>
					<td >
						<select 
								ng-model="student.presence" 
								ng-options="def.value as def.name for def in dropList.options" class="form-control">
						</select>
					</td>
				</tr>
			  </tbody>
			  </table>
		</div>`,
			link: function (scope) {

			}
		}
	})
/**
 * Widget Body Directive
 */

angular
    .module('RDash')
    .directive('rdWidgetBody', rdWidgetBody);

function rdWidgetBody() {
    var directive = {
        requires: '^rdWidget',
        scope: {
            loading: '=?',
            classes: '@?'
        },
        transclude: true,
        template: '<div class="widget-body" ng-class="classes"><rd-loading ng-show="loading"></rd-loading><div ng-hide="loading" class="widget-content" ng-transclude></div></div>',
        restrict: 'E'
    };
    return directive;
};

/**
 * Widget Footer Directive
 */

angular
    .module('RDash')
    .directive('rdWidgetFooter', rdWidgetFooter);

function rdWidgetFooter() {
    var directive = {
        requires: '^rdWidget',
        transclude: true,
        template: '<div class="widget-footer" ng-transclude></div>',
        restrict: 'E'
    };
    return directive;
};
/**
 * Widget Header Directive
 */

angular
    .module('RDash')
    .directive('rdWidgetHeader', rdWidgetTitle);

function rdWidgetTitle() {
    var directive = {
        requires: '^rdWidget',
        scope: {
            title: '@',
            icon: '@'
        },
        transclude: true,
        template: '<div class="widget-header"><div class="row"><div class="pull-right"><i class="fa" ng-class="icon"></i> {{title}} </div><div class="pull-left" ng-transclude></div></div></div>',
        restrict: 'E'
    };
    return directive;
};
/**
 * Widget Directive
 */

angular
    .module('RDash')
    .directive('rdWidget', rdWidget);

function rdWidget() {
    var directive = {
        transclude: true,
        template: '<div class="widget" ng-transclude></div>',
        restrict: 'EA'
    };
    return directive;

    function link(scope, element, attrs) {
        /* */
    }
};
angular.module('RDash')
    .controller('AlertsCtrl', function AlertsCtrl($scope, $cookies) {
        $scope.alerts = []
        $scope.alerts.push(JSON.parse($cookies.get('alert')) || {});

        $scope.closeAlert = function (index) {
            $scope.alerts.splice(index, 1);
        };
    });
angular.module('RDash')
    .controller('colelController', function ($scope, Data, $rootScope, Helper) {
        Data.get('colels').then(updateColels);
        
        $scope.colel = {};
        $scope.newColel = false;

        $scope.add = function () {
            $scope.display = true;
            $scope.colel = {
                schedule: [
                    { "start": "00:00", "end": "00:00" },
                    { "start": "00:00", "end": "00:00" },
                    { "start": "00:00", "end": "00:00" },
                    { "start": "00:00", "end": "00:00" },
                    { "start": "00:00", "end": "00:00" },
                    { "start": "00:00", "end": "00:00" }
                ],
                note: {}
            };
            $scope.colel.schedule.map(function(val){
                val.start = '00:00';
                val.end = '00:00';
            })
            $scope.newColel = true;
        };

        $scope.edit = function (id) {
            $scope.newColel = false;
            $scope.display = true;
            $scope.colel = angular.copy($scope.colels[id]);
            $scope.colel.is_only_daily = Boolean($scope.colel.is_only_daily);
            $scope.colel.is_prev_month = Boolean($scope.colel.is_prev_month);
            $scope.colel.is_one_time_allow = Boolean($scope.colel.is_one_time_allow);
            //$scope.colel.note = Helper.parseJson($scope.colel.note);
        }

        $scope.save = function (valid) {
            if (!valid) {
                $scope.formErrors = true;
            } else if (valid) {
                var method = $scope.newColel ? 'put' : 'post';
                $scope.colel.schedule = Helper.stringifyJson($scope.colel.schedule);
                $scope.colel.note = Helper.stringifyJson($scope.colel.note);

                Data[method]('colels', { colel: $scope.colel }).then(updateColels);
                $scope.close();
            }
        }

        $scope.close = function () {
            $scope.colel = {};
            $scope.formErrors = false;
            $scope.display = false;
        }

        // $scope.action = function (index, action) {
        //     Data.post(action, { editId: $scope.editId, data: $scope.colels[index] }).then(function (data) {
        //         if (data.colels) $scope.colels = data.colels;
        //         $scope.editId = undefined;
        //     });
        // };

        function updateColels(data) {
            $scope.colels = data.colels;
            $scope.colels.forEach(function(colel) {
                colel.schedule = Helper.parseJson(colel.schedule);
                colel.note = Helper.parseJson(colel.note);
            });
        }
    });
angular.module('RDash').controller("dailyController", function ($scope, Data, $filter) {
    $scope.disable = true;
    $scope.dropList = [];
    $scope.isOnlyDaily = true;
    $scope.status = [];

    $scope.show = function (date) {
        if (date) {
            $scope.date = date;
            $scope.disable = true;

            Data.get('daily/' + $scope.date.toLocaleDateString('en-GB').split('/').reverse().join('-')).then(function (data) {
                $scope.students = data.dailyRep;
                $scope.dropList = data.dropList;
                $scope.tempStudents = { amount: data.tempStudents };
                $scope.status = data.status;
            })
        }
    }

    $scope.viewDate = {
        year: new Date().getFullYear(),
        month: new Date().getMonth() + 1
    };

    $scope.changeAll = function (value, valid) {
        $scope.students.forEach(x => x.presence = parseInt(value));
    }

    $scope.students = [];

    Data.get('getProhibitions').then(function (data) {
        if (data) {
            $scope.isOnlyDaily = $scope.$parent.role === 'Admin' ? false : data.is_only_daily;
            $scope.isOneTimeAllow = $scope.$parent.role === 'Admin' || data.is_one_time_allow;
            $scope.show(new Date());

            Data.get('prevDates').then(function (data) {
                $scope.prevDates = data.prevDates;
            })
        }
    });

    $scope.changeMonth = function (currentMonth) {
        $scope.viewDate = JSON.parse(currentMonth);
    }

    $scope.save = function (valid) {
        if (!valid) {
            $scope.formErrors = true;
        } else {
            $scope.formErrors = undefined;
            var UPDaily = $scope.students.filter((val) => (val.presence !== null));
            var UPDStud = $scope.tempStudents.amount;
            var UPDdate = $scope.date.toLocaleDateString('en-GB').split('/').reverse().join('-');
            //document.querySelector(".selected").classList.remove("selected");

            Data.put('daily', {
                daily: UPDaily,
                oneTimeStud: UPDStud,
                date: UPDdate
            }).then(function (date) {

            });
            if ($scope.is_only_daily) {
                $scope.close();
            }
        }
    }

    $scope.close = function () {
        $scope.formErrors = undefined;
        $scope.students = undefined;
        $scope.definition = undefined;
        $scope.disable = false;
        document.querySelector(".selected").classList.remove("selected");
    }
});
/**
 * Master Controller
 */

angular.module('RDash')
    .controller('MasterCtrl', function MasterCtrl($scope, $cookies, $rootScope, translate, $location, Data, $state) {
        /**
         * Sidebar Toggle & Cookie Control
         */
        var mobileView = 992;
        var watch = false;

        $scope.userName = $cookies.get('user') || 'משתמש'

        $scope.getWidth = function () {
            return window.innerWidth;
        };

        $scope.logout = function () {
            // Clear all cookies.
            document.cookie.split(";").forEach(function (c) {
                document.cookie = c.replace(/^ +/, "").replace(
                    /=.*/, "=;expires=" + new Date().toUTCString() +
                    ";path=/");
            });

            window.location.href = '/';
        }

        $scope.$watch($scope.getWidth, function (newValue, oldValue) {
            if (newValue >= mobileView) {
                if (angular.isDefined($cookies.get('toggle'))) {
                    $scope.toggle = !$cookies.get('toggle') ? false : true;
                } else {
                    $scope.toggle = true;
                }
            } else {
                $scope.toggle = false;
            }

        });

        $scope.toggleSidebar = function () {
            $scope.toggle = !$scope.toggle;
            $cookies.put('toggle', $scope.toggle);
        };

        $scope.isAgreed = function () {
            return $cookies.get('agree');
        };

        $scope.role = $cookies.get('link');
        $rootScope.t = translate;

        window.onresize = function () {
            $scope.$apply();
        };

        $scope.changedColel = function (e) {

            Data.put('updColel', { currColel: this.currColel }).then(function (data) {
                $state.reload();
            });
        }

        if ($scope.role == 'Admin') {
            Data.get('colelList').then(function (data) {
                $scope.currColel = data.colel_id;
                $scope.colelList = data.colelList;
            })
        }

        var state;
        $("select.form-control").click(function (event) {
            var isMenu = $(this).parent().find('ul').text();

            if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
                if (isMenu == "") {
                    href = $(this).attr('href');
                    window.location = href;
                } else {
                    if (!state) {
                        state = true;
                        return false;
                    } else {
                        state = false;
                        href = $(this).attr('href');
                        window.location = href;
                    }
                }

            } else {
                var href = $(this).attr('href');
                window.location = href;
            }
        });

    });
angular.module('RDash')
    .controller('recomendController', function ($scope, Data, $rootScope, Notification) {
        $scope.reload = function (reload) {
            Data.get('recomends').then(function (data) {
                $scope.recomends = data.recomends;
                $scope.stats = data.stats;
                if (reload) Notification.success("נתונים נטענו בהצלחה!")
            });
        };
        $scope.reload();
        $scope.recomend = {};

        $scope.add = function () {
            $scope.display = true;
        };

        $scope.edit = function (id) {
            $scope.display = true;
            $scope.recomend = $scope.recomends[id];
            $scope.editId = id.toString();
        }

        $scope.save = function (valid) {
            if (!valid) {
                $scope.formErrors = true;
            } else if (valid) {
                // var method = $scope.editId ? 'put' : 'post';
                // if (toDelete) {
                //     method = 'delete';
                // }
                // var method = toDelete ? 'delete' : 'post';
                Data.post('recomends', { student: $scope.recomend }).then(function (result) {
                    $scope.recomends = data.recomends;
                });

                $scope.close();
            }
        }

        $scope.close = function () {
            $scope.recomend = {};
            $scope.formErrors = false;
            $scope.display = false;
        }

        $scope.whatChange = function (oldVal, newVal) {
            return (oldVal !== newVal)
        }

        $scope.action = function (index, action) {
            var recomend = angular.copy($scope.recomends[index]),
                newObj = recomend.data.newObj;
            
            if (recomend.req_type === "כולל") {
                newObj.schedule = [];
            
                for (var i = 0; i < 7; i++) {
                    if (newObj[i]) {
                        var time = newObj[i].split(' - ');
                        newObj.schedule.push({
                            start: time[0],
                            end: time[1]
                        });
                        delete newObj[i];
                    }
                };
            };    

            Data.post(action, { recomend_id: $scope.recomend_id, data: recomend }).then(function (data) {
                if (data.status) $scope.recomends[index].status = data.status;
            });
        };
    });
angular.module('RDash').controller("reportsController", function ($scope, Data, Notification) {

    $scope.dates = [new Date().toISOString().slice(0, 7)];
    if (new Date().getDate() < 4) {
        $scope.dates.push((function () {
            var x = new Date();
            x.setDate(1);
            x.setMonth(x.getMonth());
            return x.toISOString().slice(0, 7)
        })());
    }

    Data.get('definitions').then(function (data) {
        $scope.definitions = data.definitions;
        $scope.test_types = data.test_types;
        $scope.titles = data.titles;
        $scope.reports = data.reports;
        $scope.reportTypes = data.reportTypes;

        $scope.data = {
            colel: $scope.$parent.currColel,
            type: 1
        };
    });

    $scope.f = function(def){
        debugger;
        console.log(def)
    }

    $scope.refresh = function () {
        $scope.refreshing = true;
        Data.get('reports').then(function (data) {
            $scope.reports = data.reports;
            $scope.refreshing = false;
        });
    };

    $scope.save = function (table_name, object) {
        Data.put('definitions', { table_name, object });
    };

    $scope.changeMonth = function (selected) {
        $scope.data.month = selected;
    };

    $scope.changeColel = function (selected) {
        var selected = selected || {}
        $scope.data.colel = selected.id;
        $scope.data.colelName = selected.name;
    };

    $scope.changeType = function (selected) {
        $scope.data.type = selected;
    }

    $scope.newReport = function (selected) {
        if (!$scope.data.month) {
            Notification.warning("חסרים נתונים בכדי להנפיק דוח");
        } else {
            if (!$scope.data.type) $scope.data.type = 1;

            Data.put('newReport', $scope.data).then(function (res) {
                if (res.success) $scope.reports.push({
                    report: $scope.reportTypes[$scope.data.type - 1].name,
                    colel: $scope.data.colelName,
                    date_created: $scope.data.month,
                    url: res.url
                });
            });
        }
    }
})
angular.module('RDash')
    .controller('scoresController', function ($scope, Data) {
        $scope.students = [];
        $scope.dropList = {};
        $scope.UPDstud = [];

        $scope.loadData = function (selectedDate) {
            var date = selectedDate ? new Date(selectedDate) : new Date()
            $scope.date = date.toLocaleDateString('en-GB').split('/').reverse().join('-');

            Data.get('scores/' + $scope.date).then(function (data) {
                $scope.students = data.scores;
                $scope.title = data.test_type;
            });
        }
        
        Data.get('prevDates').then(function (data) {
            $scope.prevDates = data.prevDates;
        })

        $scope.changeMonth = function (currentMonth) {
            $scope.loadData(Object.values(JSON.parse(currentMonth)).join('-'))
        }

        $scope.save = function (data) {
            $scope.UPDstud = $scope.students.filter((val) => (val.oral || val.oral === 0 || val.write || val.comment));
            Data.put('scores', {
                score: $scope.UPDstud,
                date: $scope.date
            }).then(function (data) {

            })
        }

        $scope.loadData();
    })
angular.module('RDash')
    .controller('settingsController', function ($scope, Data, $state, $cookies, Notification) {
        if ($cookies.get('link') === 'Admin') {
            $state.go('recomends');
        }

        var copy;

        // $scope.data = {
        //     address: 'חנה רובינא 23 פתח תקוה בית הכנסת חב"ד יום ג: בית כנסת בישטנא רח\' עדש שפיק פינת עזרה ונחמיה',
        //     mail_address: "יהודה הנשיא 41 פתח תקוה",
        //     phone: '054-7770847',
        //     manager_name: "מענדי גרברצ'יק",
        //     schedule: [{
        //         "start": "20:00",
        //         "end": "21:30"
        //     }, {
        //         "start": "20:00",
        //         "end": "21:30"
        //     }, {
        //         "start": "20:00",
        //         "end": "21:30"
        //     }, {
        //         "start": "20:00",
        //         "end": "21:30"
        //     }, {
        //         "start": "20:00",
        //         "end": "21:30"
        //     }, {
        //         "start": "20:00",
        //         "end": "21:30"
        //     }]
        // };

        Data.get('colelSettings').then(function (data) {
            $scope.data = data.data;
            $scope.data.schedule = JSON.parse($scope.data.schedule);
            copy = angular.copy($scope.data);
        })

        $scope.submitData = function (changed) {
            if ($scope.agree) {
                $cookies.put('agree', true);

                // var changedData = {};

                // angular.forEach($scope.data, function (value, key) {
                //     if ($scope.settingsForm[key].$dirty) {
                //         changedData[key] = value;
                //     };
                // });

                if (!angular.equals($scope.data, copy)) {
                    Data.post('recomends', {
                        data: { newObj: $scope.data, oldObj: copy },
                        table: 'colel',
                        type: 'עריכה'
                    }, function (data) {

                    })
                };
                $state.go('recomends');

            } else {
                Notification.error('חובה לאשר את הנתונים');
            }
        };
    })
angular.module('RDash')
    .controller('studentController', function ($scope, Data) {
        Data.get('students').then(function (data) {
            $scope.students = data.students;
        })

        $scope.student = {};
        $scope.isNew = false;
        $scope.editId = null;
        $scope.add = function () {
            $scope.isNew = $scope.display = true;
            $scope.student = {};
        };

        $scope.edit = function (id) {
            $scope.isNew = false;
            $scope.display = true;
            $scope.student = angular.copy($scope.students[id]);
            $scope.editId = id.toString();
        }

        $scope.save = function (valid, toDelete) {
            var type = '';

            delete $scope.student.name;
            var data = {
                oldObj: null,
                newObj: $scope.student
            }
            if (toDelete) {
                type = 'מחיקה';
            } else if ($scope.isNew) {
                type = 'הוספה';
            } else {
                type = 'עריכה';
                data.oldObj = $scope.students[$scope.editId];
            }


            if (!valid) {
                $scope.formErrors = true;
            } else if (valid) {

                Data.post('recomends', { data: data, table: 'student', type: type }).then(function (result) {

                });

                $scope.close();
            }
        }

        $scope.deleteStud = function (valid) {
            if (!valid) {
                $scope.formErrors = true;
            } else if (valid) {
                $scope.student.schedule = JSON.stringify($scope.student.schedule);
                Data.post('recomends', { data: $scope.student, table: 'student', type: 'מחיקה' }).then(function (result) {

                });

                $scope.close();
            }
        }

        $scope.close = function () {
            $scope.student = {};
            $scope.formErrors = false;
            $scope.display = false;
        }
    });
angular.module('RDash').filter('inputfilter', function () {
    return function (item) {
        if (!item) return "";
        if (!item.schedule) return item;

        item.schedule.forEach(function (a, b) {
            item[b] = a.start + ' - ' + a.end;
        });

        delete item.schedule;

        return item;
    };
});
angular.module('RDash').filter('timeFilter', function () {
    return function (input) {
        if (typeof input !== "number" || input < 0) return "00:00";

        function pad(n) { return (n < 10 ? '0' : '') + n; }

        var hours = parseInt(input);
        var minutes = Math.ceil(input % 1 * 60);

        return (pad(hours) + ':' + pad(minutes));
    }
});
// This service connects to our REST API
angular.module('RDash').factory("Data", function ($http, Notification) {

    var serviceBase = '/';

    var obj = {};
    var alertMessage = function (data) {
        if (data.success) Notification.success(data.success);
        if (data.error) Notification.error(data.error);
    }
    obj.get = function (q, external) {
        var path = external ? q : serviceBase + q;
        return $http.get(path).then(function (results) {
            alertMessage(results.data);
            return results.data;
        });
    };
    obj.post = function (q, object) {
        return $http.post(serviceBase + q, object).then(function (results) {
            alertMessage(results.data);
            return results.data;
        });
    };
    obj.put = function (q, object) {
        return $http.put(serviceBase + q, object).then(function (results) {
            alertMessage(results.data);
            return results.data;
        });
    };
    obj.delete = function (q) {
        return $http.delete(serviceBase + q).then(function (results) {
            alertMessage(results.data);
            return results.data;
        });
    };

    return obj;
});
angular.module('RDash').service("Helper", function () {
    this.parseJson = function (data) {
        try {
            var a = JSON.parse(data);
            return a;
        } catch (ex) {
            return {};
        }
    };
    
    this.stringifyJson = function (data) {
        try {
            var a = JSON.stringify(data);
            return a;
        } catch (ex) {
            return "";
        }
    }    
});
// This service translates keys to hebrew.
angular.module('RDash').constant("translate", {
    "account": "חשבון",
    "account_name": "על שם",
    "bank": "בנק",
    "branch": "סניף",
    "city": "עיר",
    "first_name": "שם פרטי",
    "house": "מס בית",
    "id": "זהות",
    "last_name": "שם משפחה",
    "phone": "טלפון",
    "street": "רחוב",
    "student": "אברך",
    "colel": "כולל",
    "shul_name": "שם בית הכנסת",
    "number": "מספר בית",
    "comments": "הערות",
    "start1": "שעת התחלה יום ראשון",
    "start2": "שעת התחלה יום שני",
    "start3": "שעת התחלה יום שלישי",
    "start4": "שעת התחלה יום רביעי",
    "start5": "שעת התחלה יום חמישי",
    "start6": "שעת התחלה יום שישי",
    "end1": "שעת סיום יום ראשון",
    "end2": "שעת סיום יום שני",
    "end3": "שעת סיום יום שלישי",
    "end4": "שעת סיום יום רביעי",
    "end5": "שעת סיום יום חמישי",
    "end6": "שעת סיום יום שישי",
    "0": "יום ראשון",
    "1": "יום שני",
    "2": "יום שלישי",
    "3": "יום רביעי",
    "4": "יום חמישי",
    "5": "יום שישי",
    "manager_name": "שם המנהל",
    "mail_address": "כתובת דואר",
    "address": "כתובת הכולל",
    "schedule": "שעות פעילות",
    "supported_id": "מספר נתמך",
    "name": "שם הכולל"
});